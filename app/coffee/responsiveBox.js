// Generated by CoffeeScript 1.7.1
(function() {
  var responsiveBox;

  jQuery.fn.responsiveBox = function(options) {
    return this.each(function(i, element) {
      var rBox;
      rBox = new responsiveBox($(element), options);
      rBox.process();
      return true;
    });
  };

  responsiveBox = (function() {
    responsiveBox.prototype.defaults = {
      maxColumns: 3,
      breakingWidth: [300, 480, 1024],
      possibleColumns: [2, 4],
      gapWidth: "10"
    };

    function responsiveBox(element, options) {
      this.element = element;
      this.options = $.extend(this.defaults, options);
      this.parent = this.element.is("body") ? $(window) : this.element;
      this.objects = this.element.children(".box");
      this.maxWidth = this.options.breakingWidth[this.options.breakingWidth.length - 1];
      this.maxColumns = this.options.breakingWidth.length;
      this.column = 1;
      this.objectHeight = [];
      this.objectTop = [];
      this.totalNumber = 0;
    }

    responsiveBox.prototype.initialize = function() {
      return this.process();
    };

    responsiveBox.prototype.process = function() {
      this.calculateColumnWith();
      return this.arrangeObjects();
    };

    responsiveBox.prototype.calculateColumnWith = function() {
      var breaking, i, pwidth, _i, _len, _ref;
      pwidth = this.parent.width();
      if (pwidth >= this.options.breakingWidth[this.options.breakingWidth.length - 1]) {
        this.column = this.maxColumns;
        this.columnWidth = (this.maxWidth - this.maxColumns * this.options.gapWidth) / this.column;
      } else {
        _ref = this.options.breakingWidth;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          breaking = _ref[i];
          if (pwidth > this.options.breakingWidth[i] && pwidth < this.options.breakingWidth[i + 1] && this.options.breakingWidth[i + 1]) {
            this.column = i + 1;
          }
        }
        this.columnWidth = (pwidth - this.options.gapWidth * this.column) / this.column;
      }
      return true;
    };

    responsiveBox.prototype.arrangeObjects = function() {
      var i, object, _i, _len, _ref;
      _ref = this.objects;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        object = _ref[i];
        this.setCssObject(object, i);
      }
      return true;
    };

    responsiveBox.prototype.setCssObject = function(obj, m) {
      var col, i, j, k, n, ratio, top, tops, _i, _j, _k, _l;
      ratio = parseInt($(obj).attr("data-ratio")) ? parseInt($(obj).attr("data-ratio")) : 0;
      col = parseInt($(obj).attr("data-column")) ? parseInt($(obj).attr("data-column")) : 1;
      if (col >= this.column) {
        col = this.column;
      }
      if (this.totalNumber === 0) {
        k = 0;
      } else {
        k = Math.floor(this.totalNumber / this.column);
      }
      if (this.totalNumber + col > (k + 1) * this.column) {
        col = (k + 1) * this.column - this.totalNumber;
      }
      this.totalNumber += col;
      $(obj).css("position", "absolute");
      if (ratio === 1) {
        $(obj).height(this.columnWidth * col);
      } else {
        $(obj).height($(obj).attr("data-height"));
      }
      $(obj).width(this.columnWidth * col + this.options.gapWidth * (col - 1));
      for (i = _i = 1; 1 <= col ? _i <= col : _i >= col; i = 1 <= col ? ++_i : --_i) {
        this.objectHeight.push(parseInt($(obj).height()));
      }
      k = Math.floor((this.totalNumber - 1) / this.column);
      j = (this.totalNumber - col) % this.column;
      console.log(m);
      $(obj).css('left', (this.options.gapWidth / 2) + j * this.columnWidth + j * this.options.gapWidth);
      if (k !== 0) {
        tops = [];
        for (n = _j = col; col <= 1 ? _j <= 1 : _j >= 1; n = col <= 1 ? ++_j : --_j) {
          tops.push(parseInt(this.objectTop[this.totalNumber - this.column - n]) + this.objectHeight[this.totalNumber - this.column - n]);
        }
        top = Math.max.apply(Math, tops) + parseInt(this.options.gapWidth);
        $(obj).css('top', top);
        for (n = _k = col; col <= 1 ? _k <= 1 : _k >= 1; n = col <= 1 ? ++_k : --_k) {
          this.objectTop.push(top);
        }
      } else {
        $(obj).css('top', 0);
        for (n = _l = col; col <= 1 ? _l <= 1 : _l >= 1; n = col <= 1 ? ++_l : --_l) {
          this.objectTop.push(0);
        }
      }
      if (m + 1 === this.objects.length) {
        this.parent.height($(obj).height() + this.objectTop[m] + this.options.gapWidth);
      }
      return true;
    };

    return responsiveBox;

  })();

}).call(this);
